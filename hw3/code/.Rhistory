return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " ")
}
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
?str_split
library(stringr)
?str_split
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
reverse_words("sentence! this reverse")
cat(reverse_words("sentence! this reverse"))
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
num_cons(fox)
for (i in 1:9) {
print(paste(paste('plot0', i, sep = ''), ".png", sep = ''))
}
for (i in 10:100) {
print(paste(paste('plot', i, sep = ''), ".png", sep = ''))
}
states <- rownames(USArrests)
head(states, n = 5)
grep(pattern = 'z', x = states)
starts_with <- function(word, letter) {
if (length(grep(pattern = paste("^", letter, sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
split_chars <- function(char_str) {
char_vect <- strsplit(char_str, NULL)
return(char_vect[[1]])
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(char_vect) {
count <- rep(0, times = 5)
vowel_names <- c("a", "e", "i", "o", "u")
names(count) <- vowel_names
vowels <- c("a", "e", "i", "o", "u")
for (i in tolower(char_vect)) {
if (i %in% vowels) {
count[which(vowels == i)] <- count[which(vowels == i)] + 1
}
}
return(count)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels <- function(char_str) {
count_split <- split_chars(char_str)
return(num_vowels(count_split))
}
count_vowels("The quick brown fox jumps over the lazy dog")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
num_cons <- function(input) {
count_split <- split_chars(input)
return(length(grep(pattern = "[^aeiou]",  x = count_split, ignore.case = TRUE))
- length(grep(pattern = "[[:blank:]]",  x = count_split, ignore.case = TRUE)))
}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
library(stringr)
reverse_words2 <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
install.packages(XML)
install.packages("XML")
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
nav_node
navbar_nodes <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]/li')
navbar_nodes
xpathSApply(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]',
fun = xmlValue)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
ALinks
Alinks
install.packages(c("BH", "boot", "class", "cluster", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "plyr", "R6", "Rcpp", "readr", "rmarkdown", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "XML", "xml2", "xtable"))
ls
dir
s
ls
cd
x -> []
x -> [1,2,3,4,5]
x -> {1,2,3,4,5}
x <- [1,2,3,4,5]
x <- c(1,2,3,4,5)
nstall.packages("rmarkdown")
install.packages("rmarkdown")
adData = read.csv(file = "../../data/Advertising.csv")
tv = adData$TV
radio = adData$Radio
newspaper = adData$Newspaper
sales = adData$Sales
rel_tv_sales = lm(formula = sales ~ tv)
rel_radio_sales = lm(formula = sales ~ radio)
rel_newspaper_sales = lm(formula = sales ~ newspaper)
summary_tv_sales = summary(rel_tv_sales)
summary_radio_sales = summary(rel_radio_sales)
summary_newspaper_sales = summary(summary_radio_sales)
setwd("~/Documents/Fall 2016/Stats 159/HW/hw3")
adData = read.csv(file = "../../data/Advertising.csv")
tv = adData$TV
radio = adData$Radio
newspaper = adData$Newspaper
sales = adData$Sales
rel_tv_sales = lm(formula = sales ~ tv)
rel_radio_sales = lm(formula = sales ~ radio)
rel_newspaper_sales = lm(formula = sales ~ newspaper)
summary_tv_sales = summary(rel_tv_sales)
summary_radio_sales = summary(rel_radio_sales)
summary_newspaper_sales = summary(summary_radio_sales)
adData = read.csv(file = "../../data/Advertising.csv")
adData = read.csv(file = "../../data/Advertising.csv")
adData = read.csv(file = "data/Advertising.csv")
tv = adData$TV
radio = adData$Radio
newspaper = adData$Newspaper
sales = adData$Sales
rel_tv_sales = lm(formula = sales ~ tv)
rel_radio_sales = lm(formula = sales ~ radio)
rel_newspaper_sales = lm(formula = sales ~ newspaper)
summary_tv_sales = summary(rel_tv_sales)
summary_radio_sales = summary(rel_radio_sales)
summary_newspaper_sales = summary(summary_radio_sales)
sum(rel_tv_sales$residuals^2)
sum(rel_tv_sales$effects)
help(lm)
rel_tv_sales$fitted.values
rel_tv_sales$x
rel_tv_sales$y
rel_tv_sales$df.residual
rel_tv_sales$rank
rel_tv_sales$coefficients
rel_tv_sales$terms
rel_tv_sales$xlevels
len(rel_tv_sales)
lenth(rel_tv_sales)
length(rel_tv_sales)
length(rel_tv_sales$residuals)
length(rel_tv_sales$fitted.values)
rel_tv_sales$call
rel_tv_sales$assign
rel_tv_sales$qr
help(testthat)
help(testthat)
testthat()
devtools::use_testthat()
devtools::use_testthat()
import(testthat)
require(testthat)
install.packages("testthat")
library(test_that)
library(packages = test_that)
setwd("~/Documents/Fall 2016/Stats 159/HW/hw3/code")
source("/functions/regression-functions.R")
source("functions/regression-functions.R")
help(require)
require(test_that)
require(testthat)
real.roots <- function(a, b, c)
{
if (a == 0.)
stop("Leading term cannot be zero")
d = b*b - 4*a*c # discriminant
if (d < 0)
rr = c()
else if (d == 0)
rr = c( -b/(2*a) )
else
rr = c( (-b - sqrt(d))/(2*a),
(-b + sqrt(d))/(2*a)  )
return(rr)
}
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_that( length(roots), equals(1) )
expect_that( roots, equals(-3000) )
# Test whether ABSOLUTE error is within 0.1
expect_that( roots, equals(-3000.01, tolerance  = 0.1) )
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3001, tolerance  = 0.1, scale=-3001)
})
test_that("Repeated root", {
roots <- real.roots(1, 6000, 9000000)
expect_that( length(roots), equals(1) )
expect_that( roots, equals(-3000) )
# Test whether ABSOLUTE error is within 0.1
expect_that( roots, equals(-3000.01, tolerance  = 0.1) )
# Test whether RELATIVE error is within 0.1
# To test relative error, set 'scale' equal to expected value.
# See base R function all.equal for optional argument documentation.
expect_equal( roots, -3001, tolerance  = 0.1, scale=-3001)
})
test_that("Bogus tests", {
x <- c(1, 2, 3)
expect_that( length(x), equals(2.7) )
expect_that( x, is_a("data.frame") )
})
help(lm)
tc
tv
residual_sum_squares
rel_tv_sales
rel_tv_sales$sigma
?summary.lm
summary(rel_tv_sales)$df
summary(rel_tv_sales)$sigma
3.258656^2 *(198)
3.258656^2 *(198)
summary(rel_tv_sales)$correlation
summary(rel_tv_sales)$fstatistic
summary(rel_tv_sales)$residuals
sum(summary(rel_tv_sales)$residuals)
sum(summary(rel_tv_sales)$residuals^2)
.6119-1
TSS = 2102.531/3881
TSS
TSS = 2102.531/.3881
TSS
mean(rel_tv_sales)
predict(rel_tv_sales)
rel_tv_sales$fitted.values
y-mean(rel_tv_sales)
sum( (rel_tv_sales-ybar)^2 )
sum( (rel_tv_sales-rel_tv_salesbar)^2 )
rel_tv_sales$R[i]
rel_tv_sales$R[]
rel_tv_sales$R[2]
rel_tv_sales$R[24432]
rel_tv_sales$correlation
summary(rel_tv_sales)
summary(rel_tv_sales)$R[2]
summary(rel_tv_sales)$correlation
summary(rel_tv_sales)$r.squared
total_sum_squares <- function(lm_obj) {
y = (lm_obj)^.5 + lm_obj$fitted.values
y_bar = mean(y)
print(y_bar)
return(sum((y_bar - mean(lm_obj$fitted.values))^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
y = (lm_obj$residuals)^.5 + lm_obj$fitted.values
y_bar = mean(y)
return(sum((y_bar - mean(lm_obj$fitted.values))^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
y = (lm_obj$residuals)^.5 + lm_obj$fitted.values
y_bar = mean(y)
print(y_bar)
return(sum((y_bar - mean(lm_obj$fitted.values))^2))
}
total_sum_squares(rel_tv_sales)
(lm_rel_tv_salesobj$residuals)^.5 + lm_rel_tv_salesobj$fitted.values
rel_tv_sales$residuals^.5
sum(rel_tv_sales$residuals^2)
sum(rel_tv_sales$residuals^.5)
sum(rel_tv_sales$residuals^(.5))
rel_tv_sales$residuals^.5
sum(rel_tv_sales$residuals^2)
sum(rel_tv_sales$residuals^3)
sum(rel_tv_sales$residuals^5)
sum(rel_tv_sales$residuals^.5)
sum(rel_tv_sales$residuals^2)
sum(rel_tv_sales$residuals^2)
resid2 = rel_tv_sales$residuals^2
sum(resid2^.25)
total_sum_squares <- function(lm_obj) {
residual2 = sum(lm_obj$residuals^2)
y = residual2^.25 + lm_obj$fitted.values
y_bar = mean(y)
print(y_bar)
return(sum((y_bar - mean(lm_obj$fitted.values))^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
residual2 = sum(lm_obj$residuals^2)
y = residual2^.25 + lm_obj$fitted.values
y_bar = mean(y)
print(y_bar)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
resid2^4
sum(resid2^4)
residual2 = sum(lm_obj$residuals^2)
residual2 = sum(rel_tv_sales$residuals^2)
residual2
residual2^.25
6.771511^4
total_sum_squares <- function(lm_obj) {
residual_square = sum(lm_obj$residuals^2)
residual_root = residual_square^.25
y = residual_root + lm_obj$fitted.values
y_bar = mean(y)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
residual_square = sum(lm_obj$residuals^2)
residual_root = residual_square^.25
y = residual_root + lm_obj$fitted.values
print(y)
y_bar = mean(y)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
residual_square = sum(lm_obj$residuals^2)
residual_root = residual_square^.5
y = residual_root + lm_obj$fitted.values
y_bar = mean(y)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
residual_square = sum(lm_obj$residuals^2)
residual = residual_square^.5
y = residual + lm_obj$fitted.values
y_bar = mean(y)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
y = lm_obj$residuals + lm_obj$fitted.values
y_bar = mean(y)
return(sum((y_bar - lm_obj$fitted.values)^2))
}
total_sum_squares(rel_tv_sales)
total_sum_squares <- function(lm_obj) {
y = lm_obj$residuals + lm_obj$fitted.values
y_bar = mean(y)
return(sum((lm_obj$fitted.values - y_bar)^2))
}
total_sum_squares(rel_tv_sales)
y = rel_tv_sales$residuals + rel_tv_sales$fitted.values
adData = read.csv(file = "../../data/Advertising.csv")
tv = adData$TV
radio = adData$Radio
newspaper = adData$Newspaper
sales = adData$Sales
adData = read.csv(file = "../data/Advertising.csv")
tv = adData$TV
radio = adData$Radio
newspaper = adData$Newspaper
sales = adData$Sales
sales = y
sales = adData$Sales
sales == y
mean(sales)
mean(y)
(tv - sales)^2
(tv - sales)
rel_tv_sales$residuals
rel_tv_sales$residuals + rel_tv_sales$fitted.values
sales
y
mean(y)
mran(sales)
mean(sales)
total_sum_squares <- function(lm_obj) {
y = lm_obj$residuals + lm_obj$fitted.values
y_bar = mean(y)
print(y_bar)
return(sum((lm_obj$fitted.values - y_bar)^2))
}
total_sum_squares(rel_tv_sales)
sum(rel_tv_sales$residuals^2)
help(summary.;m)
help(summary.lm)
rel_tv_sales$df.residual
rel_tv_sales$df
summary(rel_tv_sales)$df
